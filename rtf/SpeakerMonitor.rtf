{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset0 BitstreamVeraSans-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue179;\red128\green0\blue0;
\red179\green0\blue179;\red102\green0\blue102;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 (\
	\cf3 var\cf2  window, view, rangers, r, amplitudes;\
	if( ~monitorBus.isNil, \{ ~monitorBus = \cf3 NodeProxy\cf2 .new(s, \cf4 \\control\cf2 , \cf5 40\cf2 ) \} );\
	~monitorBus.source = \{\
		\cf3 Amplitude\cf2 .kr( \cf3 InFeedback\cf2 .ar( \cf3 VirtualSpeakerArray\cf2 .get.getBusNums ), \cf5 0.05\cf2 , \cf5 10 \cf2 );\
	\};\
	\
	amplitudes = \cf3 FloatArray\cf2 .newFrom( \cf5 0\cf2 !\cf5 40 \cf2 );\
	\
	window = \cf3 SCWindow\cf2 ( \cf6 "Speaker monitor"\cf2 , \cf3 Rect\cf2 (\cf5 100\cf2 ,\cf5 100\cf2 ,\cf5 350\cf2 ,\cf5 400\cf2 ));\
	view = \cf3 SCUserView\cf2 ( window, \cf3 Rect\cf2 (\cf5 -60\cf2 ,\cf5 0\cf2 ,\cf5 400\cf2 ,\cf5 400\cf2 ))\
		.drawFunc_(\{\
			\cf3 var\cf2  i=\cf5 0\cf2 , scale=\cf5 1\cf2 /\cf5 2\cf2 ;\
			\cf3 Pen\cf2 .strokeColor = \cf3 Color\cf2 .black;\
			\cf3 VirtualSpeakerArray\cf2 .get.speakers.do(\{\
				\cf3 | spkr, i |\cf2 \
				\cf3 var\cf2  amp = amplitudes[i].min(\cf5 1\cf2 );\
				\cf3 Pen\cf2 .fillColor = \cf3 Color\cf2 ( amp.pow(\cf5 4\cf2 ), (\cf5 1\cf2 -amp).pow(\cf5 0.3\cf2 ), \cf5 0\cf2 );\
				\cf3 Pen\cf2 .fillRect(\cf3 Rect\cf2 (spkr.x*scale + ((spkr.angle*pi*\cf5 2\cf2 ).sin*\cf5 20\cf2 ), \
					spkr.y*scale - ((spkr.angle*pi*\cf5 2\cf2 ).cos*\cf5 20\cf2 ),\
					 \cf5 20\cf2 *amp, \cf5 20\cf2 ) );\
				\cf3 Pen\cf2 .strokeRect( \cf3 Rect\cf2 (spkr.x*scale + ((spkr.angle*pi*\cf5 2\cf2 ).sin*\cf5 20\cf2 ), \
					spkr.y*scale - ((spkr.angle*pi*\cf5 2\cf2 ).cos*\cf5 20\cf2 ),\
					 \cf5 20\cf2 , \cf5 20\cf2 ) );\
			\})\
		\});\
	~iphone =
\f1\fs24  \cf3 NetAddr\cf2 (\cf6 "10.0.2.26"\cf2 , \cf5 57130\cf2 );
\f0\fs18 \
	r = \cf3 Routine\cf2 (\{\
		loop \{\
			\cf3 var\cf2  lastAmps = \cf5 0\cf2 !\cf5 40\cf2 ;\
			~monitorBus.bus.getn(\cf5 40\cf2 , \{ \
				\cf3 |result|\cf2 \
				\cf3 var\cf2  messages; \
				messages = result.collect(\{\
					\cf3 | amp, i |\cf2 \
					if( ((amp<\cf5 0.001\cf2 ) && (lastAmps[i]<\cf5 0.001\cf2 )).not, \{\
						lastAmps[i] = amp;\
						~iphone.sendMsg(\cf6 "/1/"\cf2  ++ i, amp);\
					\})\
				\});\
			\});\
			\cf5 0.1\cf2 .yield;\
		\}\
	\}).play(\cf3 AppClock\cf2 );\
	window.front;\
	window.onClose_(\{ r.stop; ~monitorBus.clear \})\
)\
	}