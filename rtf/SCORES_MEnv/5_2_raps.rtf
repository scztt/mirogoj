{\rtf1\ansi\ansicpg1252\cocoartf1138
{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset0 LucidaSans;\f2\fnil\fcharset0 LucidaGrande;
\f3\fnil\fcharset0 BitstreamVeraSans-Roman;\f4\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;\red128\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs22 \cf2 // STEREO RAPS TO BE DOUBLED: IN THIS WAY:\cf0 \
\cf2 // LISTED AS FILENAME: WHICH CLUSTER TO MAPE TO:\cf0 \
\cf2 // 1/2 : 0/6\cf0 \
\cf2 // 3/4 : 2/8\cf0 \
\cf2 // 5/6 : 4/10\cf0 \
\cf2 // 7/8 : 1/7\cf0 \
\cf2 // 9/10 : 3/9\cf0 \
\cf2 // 11/12 : 5/11\cf0 \
\cf2 //\cf0 \
\
\cf3 MiroEnvironment\cf0 .get(\cf4 \\raps5\cf0 ).push;\
\
~init = \{\
\
	~vg = \cf3 VirtualSpeakerArray\cf0 .get.groupings;\
	~leftChannels = [\
		~vg[0].atAll([0,2]),\
		~vg[6].atAll([0,2]),\
		~vg[2].atAll([0,2]),\
	\
		~vg[8].atAll([0]),\
		~vg[4].atAll([0,2]),\
		~vg[10].atAll([0]),\
		\
		~vg[1].atAll([0,2]),\
		~vg[7].atAll([0,2]),\
		~vg[3].atAll([0]),\
		\
		~vg[9].atAll([0,2]),\
		~vg[5].atAll([0]),\
		~vg[11].atAll([0,2])\
	];\
	\
	~rightChannels = [\
		~vg[0].atAll([1,3]),\
		~vg[6].atAll([1]),\
		~vg[2].atAll([1,3]),\
		\
		~vg[8].atAll([0]),\
		~vg[4].atAll([1,3]),\
		~vg[10].atAll([1,3]),\
		\
		~vg[1].atAll([1,3]),\
		~vg[7].atAll([1,3]),\
		~vg[3].atAll([1,2]),\
		\
		~vg[9].atAll([1,3]),\
		~vg[5].atAll([0]),\
		~vg[11].atAll([1,3])\
	];\
	\
	~rightChannels = ~rightChannels.collect( \cf3 _\cf0 .collect( \cf3 _\cf0 .busNum ) );\
	~leftChannels = ~leftChannels.collect( \cf3 _\cf0 .collect( \cf3 _\cf0 .busNum ) );\
\
	\cf3 SynthDef\cf0 ( \cf4 \\Stereo12ChanBellPlayer\cf0 , \{\
		\cf3 | amp, dur=20 |\cf0 \
		\cf3 var\cf0  env, envGen, buffers, signals;	\
		buffers = \cf3 Control\cf0 .names([\cf4 \\buffers\cf0 ]).kr( 0!6 );\
		env = \cf3 Control\cf0 .names([\cf4 \\env\cf0 ]).kr( \cf3 Env\cf0 (1!12, [1]++(0!10)) );\
		envGen = \cf3 EnvGen\cf0 .kr( env, timeScale:dur, levelScale:amp, doneAction:2 );\
		signals = \cf3 DiskIn\cf0 .ar( 2, buffers, 0 ) * envGen;\
		signals = signals.stutter(2);\
\cf2 //		signals[5] = signals[5]*0.5;\cf0 \
\cf2 //		signals[8] = signals[8]*0.5;\cf0 \
		signals.do(\{\
			\cf3 |sig, i|\cf0 \
			\cf3 Out\cf0 .ar( ~rightChannels[i], sig[0] );\
			\cf3 Out\cf0 .ar( ~leftChannels[i], sig[1] );\
		\});\
	\}).send(s).store;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs24 \cf0 	\
	~ghostBuffer = \cf3 Buffer\cf0 .read( s, \cf5 "/Users/Shared/
\f2 sincroniaTesla_ghost.wav
\f1 "\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs22 \cf0 \
	\cf5 "RAPS INITIALIZED"\cf0 .
\f3\fs24 log(\cf6 \\
\f4 \cf4 miroStatus, 1
\f3 \cf0 )
\f0\fs22 ;\
\};\
\
~prepare = \{\
	~buffers = [\
			\cf3 Buffer\cf0 .cueSoundFile(s, \cf5 "/Users/Shared/
\f2\fs24 \cf5 RAPS_CLuster_1_2.aiff
\f0\fs22 \cf5 "\cf0 , 0, 2),\
			\cf3 Buffer\cf0 .cueSoundFile(s, \cf5 "/Users/Shared/
\f2\fs24 \cf5 RAPS_CLuster_3_4.aiff
\f0\fs22 \cf5 "\cf0 , 0, 2),\
			\cf3 Buffer\cf0 .cueSoundFile(s, \cf5 "/Users/Shared/
\f2\fs24 \cf5 RAPS_CLuster_5_6.aiff
\f0\fs22 \cf5 "\cf0 , 0, 2),\
			\cf3 Buffer\cf0 .cueSoundFile(s, \cf5 "/Users/Shared/
\f2\fs24 \cf5 RAPS_CLuster_7_8.aiff
\f0\fs22 \cf5 "\cf0 , 0, 2),\
			\cf3 Buffer\cf0 .cueSoundFile(s, \cf5 "/Users/Shared/
\f2\fs24 \cf5 RAPS_CLuster_9_10.aiff
\f0\fs22 \cf5 "\cf0 , 0, 2),\
			\cf3 Buffer\cf0 .cueSoundFile(s, \cf5 "/Users/Shared/
\f2\fs24 \cf5 RAPS_CLuster_11_12.aiff
\f0\fs22 \cf5 "\cf0 , 0, 2),\
		];\
			\
	~playClock = \cf3 TempoClock\cf0 .new;\
	~playTask = \
		\cf3 Task\cf0 (\{ \cf3 |starttime|\cf0 \
			\cf3 var\cf0  totalDur;\
			totalDur = 3*60;\
	\
			~synth = \cf3 Synth\cf0 ( \cf4 \\Stereo12ChanBellPlayer\cf0 ,args:[ \cf4 \\amp\cf0 , -6.dbamp, \cf4 \\dur\cf0 , 3*60, \cf4 \\buffers\cf0 , ~buffers.collect(\{ \cf3 |buf|\cf0  buf.bufnum \}) ], 	target:\cf3 GroupManager\cf0 .get.synths );\
	\
			
\f1\fs24 ~ghost = \cf3 Ghost\cf0 .newFromBuffer( ~ghostBuffer, 30, s );\

\f0\fs22 			1.wait;\
			~ghost.play;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs24 \cf0 			10.wait;\
			~ghost.set( \cf4 \\amp\cf0 , 100, \cf4 \\width\cf0 , 0.9, \cf4 \\fadeTime\cf0 , 1, \cf4 \\rate\cf0 , 0.2, \cf4 \\rateDev\cf0 , 0.01, \cf4 \\density\cf0 , 0.2 );\
			10.wait;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs22 \cf0 			~ghostPan1 = \cf3 ElementPanner\cf0 ( ~ghost.ghostBus );\
			~ghostPan2 = \cf3 ElementPanner\cf0 ( ~ghost.ghostBus );\
			\cf2 // 15 seconds before end\cf0 \
			(totalDur-10-10-1-15).wait;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs24 \cf0 			~ghostPan1.play; \
			~ghostPan2.play;\
			4.wait;\
			~ghostPan1.updateState( 10, \cf4 \\perim\cf0 , \{\
				\cf3 SeedMaster\cf0 .ugen( ~ghost.hash );\
				[ 1, \cf3 LFNoise2\cf0 .kr( \cf3 LFNoise2\cf0 .kr(0.2, 0.2, 0.2), 0.5, 0.5 ), 1 ];\
			\});\
			~ghostPan2.updateState( 10, \cf4 \\rect\cf0 , \{\
				\cf3 SeedMaster\cf0 .ugen( ~ghost.hash+1 );\
				[ 1, \
					\cf3 SinOsc\cf0 .kr( 0.2, 0, 0.2, \cf3 LFNoise2\cf0 .kr( 0.2, 0.3, 0.5 ) ), \
					\cf3 SinOsc\cf0 .kr( 0.2, 0, 0.2, \cf3 LFNoise2\cf0 .kr( 0.2, 0.3, 0.5 ) ), \
				1 ];\
			\});\
			10.wait;\
			~ghost.set( \cf4 \\amp\cf0 , 50, \cf4 \\width\cf0 , 0.9, \cf4 \\fadeTime\cf0 , 0.1, \cf4 \\rate\cf0 , 0.2, \cf4 \\rateDev\cf0 , 0.01, \cf4 \\density\cf0 , 1 );\
			60.wait;\
			~ghost.set( \cf4 \\amp\cf0 , 80, \cf4 \\width\cf0 , 0.5, \cf4 \\fadeTime\cf0 , 1, \cf4 \\rate\cf0 , 0.2, \cf4 \\rateDev\cf0 , 0.2, \cf4 \\density\cf0 , 3 );\
			~ghostPan1.updateState( 60, \cf4 \\perim\cf0 , \{\
				\cf3 SeedMaster\cf0 .ugen( ~ghost.hash );\
				[ 1, \cf3 LFNoise2\cf0 .kr( \cf3 LFNoise2\cf0 .kr(0.2, 0.2, 0.2), 0.5, 0.5 ), 0 ];\
			\});\
			~ghostPan2.updateState( 60, \cf4 \\rect\cf0 , \{\
				\cf3 SeedMaster\cf0 .ugen( ~ghost.hash );\
				[ 1, \
					\cf3 SinOsc\cf0 .kr( 0.2, 0, 0.2, \cf3 LFNoise2\cf0 .kr( 0.2, 0.3, 0.5 ) ), \
					\cf3 SinOsc\cf0 .kr( 0.2, 0, 0.2, \cf3 LFNoise2\cf0 .kr( 0.2, 0.3, 0.5 ) ), \
				0 ];\
			\});\
			~this.prepareNext();\
			60.wait;\
			~ghost.set( \cf4 \\amp\cf0 , 0, \cf4 \\width\cf0 , 0.01, \cf4 \\fadeTime\cf0 , 10, \cf4 \\rate\cf0 , 0.01, \cf4 \\rateDev\cf0 , 0.75, \cf4 \\density\cf0 , 1 );\
			~\cf3 this\cf0 .playNext();\
			10.wait;	\
			~\cf3 this\cf0 .cleanup();
\f0\fs22 			\
		\}, ~playClock);\
\
	\cf5 "RAPS PREPARED"\cf0 .
\f3\fs24 log(\cf6 \\
\f4 \cf4 miroStatus, 1
\f3 \cf0 )
\f0\fs22 ;\
\};\
\
~play = \{\
\
	~playTask.play;\
	\cf5 "SYNCHRONY PLAYING - RAPS"\cf0 .
\f3\fs24 log(\cf6 \\
\f4 \cf4 miroStatus, 1
\f3 \cf0 )
\f0\fs22 ;\
\
\};\
\
~free = \{\
\
	~synth.free;\
	~ghost.free;\
	
\f1\fs24 ~ghostPan1.free;\
	~ghostPan2.free;
\f0\fs22 \
	~playClock.clear;\
	~buffers.do(\{ \cf3 |buf|\cf0  buf.close \});\
	~buffers.do(\{ \cf3 |buf|\cf0  buf.free \});\
	~buffers = ~playTask = ~playClock = ~synth = 
\f1\fs24 ~ghostPan1 = ~ghostPan2 =
\f0\fs22  \cf3 nil\cf0 ;\
	\cf5 "SYNCHRONY FREEING - RAPS"\cf0 .
\f3\fs24 log(\cf6 \\
\f4 \cf4 miroStatus, 1
\f3 \cf0 )
\f0\fs22 ;\
\
\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 MiroEnvironment\cf0 .get(\cf4 \\raps5\cf0 ).pop;\
\
\
\cf2 //MiroEnvironment.gui}