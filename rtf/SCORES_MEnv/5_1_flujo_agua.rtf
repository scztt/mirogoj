{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red0\green115\blue0;
\red96\green96\blue96;\red191\green0\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs22 \cf2 MiroEnvironment\cf3 .get(\cf4 \\flujo5_agua\cf3 ).push;\
\
~init = \{\
\
	~data = \cf2 FileReader\cf3 .read(\cf5 "/Users/Shared/db_allMirogoj_dodDESC_ww1"\cf3 .standardizePath, \cf2 true\cf3 , \cf2 true\cf3 , delimiter: $|);\
	\
	~data.size.do(\{ \cf2 |i|\cf3 \
		\cf2 var\cf3  name, temp, finalname;\
		finalname=[];\
		name = ~data[i][1].split($ );\
		temp=\cf5 ""\cf3 ;\
		(name[0].size-3).do(\{ \cf2 |i|\cf3  temp=temp++name[0][i+3] \});\
		name[0] = temp;\
		block\{ \cf2 |break|\cf3 \
			name.do(\{ \cf2 |me|\cf3  ( me.asFloat > 0 ).if(\
					\{ finalname = finalname.add(me.asFloat) \},\
					\{ break.value() \})\
				\});\
			\};\
		~data[i] = [~data[i][0].asFloat, finalname];\
		\});\
\
	\cf5 "INITIATED FLUX 5 - WATER"\cf3 .postln;\
\};\
\
~prepare = \{\
\
 	~prepClock = \cf2 TempoClock\cf3 .new;\
 	~prepTask = \{		\
		\cf2 Task\cf3 (\{	\
			~busses = [	\cf2 Bus\cf3 .alloc(\cf4 \\audio\cf3 , numChannels:1) ]; \
			\
			\cf6 ////	ADD SNAPSHOTS	//////\cf3 \
\cf6 //			~shot = AtsSnapShot.new("/Users/Shared/zee.ats", 0.5, 5, -25.dbamp);\cf3 \
			0.2.wait;\
			\
			\cf6 ////	CONFIRM BUSSES, DATAS	//////\cf3 \
			~waters = [	\cf2 Water\cf3 .new(s, ~busses[0].bus, ~data)];\
			0.3.wait;\
			\
			\cf6 ////	ADD VOICES, CONFIRM BUSSES, SHOTS //////\cf3 \
\cf6 //			~voices = [	Voice.new(s, ~waters[0], 0, ~shot,  16.dbamp, 0.01, 2.5, 3) ];\cf3 \
			\
			~pans = ~busses.collect(\{ \cf2 |bus|\cf3  \cf2 ElementPanner\cf3 .new(bus.bus) \});\
			0.3.wait;\
			\
			~watersScore = [\
				[\
					[ 3, \{	~pans[0].updateState( 10, \cf4 \\perim\cf3 , [1,0.2,1] ) \} ], \cf6 // half perimeter NORTH\cf3 \
					[ 50, \{	~pans[0].updateBehavior( 10, \cf4 \\jittery3\cf3 , (\cf4 \\speed\cf3 : 2, \cf4 \\freq\cf3 :0.05, \cf4 \\amount\cf3 : 1, \cf4 \\spread\cf3 : 0.2) ) \}], \cf6 // rand amp nuances on NORTH perimeter\cf3 \
					[ 80, \{	~pans[0].updateState( 45, \cf4 \\perim\cf3 , [1,0.8,1] ) \} ], \cf6 // half perimeter SOUTH\cf3 \
					[ 90,	\{	~waters[0].updateState( 22, 1, 20, 0.35, 0.5, 0.1, 3) \} ], \cf6 // water dripping\cf3 \
					[ 180,	\{	~waters[0].updateState( 40, 20, 3, 0.5, 0.1, 0.4, 3 ) \} ], \cf6 // sink 1\cf3 \
					[ 225, \{	~pans[0].updateBehavior( 10, \cf4 \\jittery3\cf3 , (\cf4 \\speed\cf3 : 0.075, \cf4 \\amount\cf3 : 1, \cf4 \\spread\cf3 : 0.8, \cf4 \\pos\cf3 : 0.8) ) \}], \cf6 // rand amp nuances on SOUTH perimeter\cf3 \
					[ 360, \{ 	~pans[0].updateState( 60, \cf4 \\rect\cf3 , [1,0.5,0.5,1] ) \}], \cf6 // al rectangulo\cf3 \
					[ 410,	\{	~waters[0].updateState( 20, 5, 2500, 0.6, 0.2, 0.35, 5 ) \} ], \cf6 // pitchy gurgle\cf3 \
					[ 430,	\{	~pans[0].updateBehavior( 15, \cf4 \\toCenterPoint\cf3 , [10]) \}], \cf6 // al oeste del rectangulo central\cf3 \
					[ 450, \{	~pans[0].updateBehavior( 15, \cf4 \\leftAndRight_slow\cf3  ) \}], \cf6 // oscilacion lenta regular entre oeste y este del rectangulo central\cf3 \
					[ 540,	\{	~waters[0].updateState( 15, 25, 3, 1, 5.8, 0.5, 0.24) \}], \cf6 // feedback\cf3 \
					[ 540, \{	\cf5 "fb started"\cf3 .postln	\}], \cf6 // feedback\cf3 \
					[ 576,	\{	~waters[0].updateState( 15, 250, 4.5, 1.1, 1.4, 0.4, 0.47 ) \}], \cf6 // machine\cf3 \
					[ 590,	\{	~waters[0].updateState( 15, 2000, 3, 0.5, 0.9, 0.4, 0.5 ) \}], \cf6 // dark low current\cf3 \
					[ 590,	\{	~pans[0].updateState( 20, \cf4 \\perim\cf3 , [1.0,0.1,0] ) \} ], \cf6 // Cluster 01 Extremo NorOeste\cf3 \
					[ 620,	\{	~pans[0].updateState( 20, \cf4 \\perim\cf3 , [1.0,0.5,0.1] ) \} ], \cf6 // Cristo\cf3 \
					[ 643,	\{	\cf0 ~\cf7 this\cf0 .prepareNext() \} ],\cf3 \
					[ 650, \{	~pans[0].updateState( 20, \cf4 \\perim\cf3 , [1,0.5,3] ) \}], \cf6 // ALL THE PERIMETER\cf3 \
					[ 745, \{	~\cf2 this\cf3 .playNext() \} ],\
					[ 750, \{	~waters[0].free	\}]\
				]			\
			\cf6 //////////	ADD ~THIS.PREPARENEXT AND ~THIS.CLEANUP //////////\cf3 \
			];\
			\
			\
			~finishedFlag = \cf2 false\cf3 ;\
			\
			\cf6 ////	MAKE SURE NUMBER OF COLLECTED SCORES CORRESPONDS TO THE NUMBER OF WINDS //////\cf3 \
			~waterTasks = 1.collect(\{ \cf2 | waterIndex |\cf3 \
				\cf2 var\cf3  thisClock;\
				thisClock = \cf2 TempoClock\cf3 .new;\
					\cf2 Task\cf3 (\{ \cf2 |starttime|\cf3 \
						\cf2 var\cf3  update, srcdex, now, offset, finished;\
						update = 2; \cf6 // update time for the task to check the score\cf3 \
						srcdex = 0;\
						now = 0.0;\
						offset = 0.0;\
						finished = \cf2 false\cf3 ;\
						\cf5 "checking water "\cf3 .post; waterIndex.post; \cf5 "'s "\cf3 .post; ~watersScore[ waterIndex ].size.post; \cf5 " breakpoints for offest"\cf3 .postln;\
						~watersScore[ waterIndex ].size.do(\{ \cf2 | i |\cf3 \
							(offset > ~watersScore[waterIndex][i][0]).if(\{ srcdex = srcdex + 1 \});\
						\});\
						\cf5 "water "\cf3 .post; waterIndex.post; \cf5 " is starting at breakpoint "\cf3 .post; srcdex.postln;\
\
						~waters[waterIndex].play;\
						1.wait;\
\
						block(\{ \cf2 | break |\cf3 \
							\cf2 inf\cf3 .do(\{ \
								\cf2 var\cf3  state;\
								now = \cf2 thisThread\cf3 .beats - starttime + offset;\
								finished.not.if(\{\
									(now > ~watersScore[ waterIndex ][srcdex][0]).if(\{\
											state = ~watersScore[ waterIndex ][srcdex][1];\
											s.makeBundle(\cf2 nil\cf3 , state);\
											srcdex = srcdex + 1;\
											\cf5 "score "\cf3 .post; waterIndex.post; \cf5 " advancing to "\cf3 .post; srcdex.postln;\
											(srcdex == ~watersScore[ waterIndex ].size).if(\{\
												finished = \cf2 true\cf3 ;\
												~finishedFlag = \cf2 true\cf3 ;\
												\cf5 "this water's score is FINISHED: "\cf3 .post; waterIndex.postln;\
												break.value();\
											\});\
									\});\
								\});\
								update.wait;\
							\});\
						\});	\
					\}, thisClock);\
			\}); \
			1.5.wait;\
			\cf5 "prepare complete for FLUX 5 - WATER"\cf3 .postln;\
		\}, ~prepClock);\
	\};\
	~prepTask.value.play;\
\
\};\
\
~play = \{\
\
	~pans.do( \cf2 _\cf3 .play );	\
	~waterTasks.do( \cf2 _\cf3 .play );\
\
\};\
\
~free = \{\
\
	~busses.do(\cf2 _\cf3 .free);\
	~pans.do(\cf2 _\cf3 .free);\
	~prepClock.clear;\
	~waterTasks.do(\{ \cf2 | task |\cf3  task.stop.reset; task.clock.clear\});\
		~finishedFlag.not.if(\{\
		\cf5 "finished early"\cf3 .postln;		\
		~waters.do(\{ \cf2 |water|\cf3  water.killNow \});\
		\cf6 //~voices.do(\{ |voice| voice.killNow \});\cf3 \
	\});\
	~busses = ~waters = ~pans = ~prepTask = ~prepClock = ~waterTasks = ~watersScore = ~finishedFlag = \cf2 nil\cf3 ;\
	\
\};\
\
\cf2 MiroEnvironment\cf3 .get(\cf4 \\flujo5_agua\cf3 ).pop;\
\cf6 //MiroEnvironment.gui}