{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red96\green96\blue96;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs22 \cf2 MiroEnvironment\cf0 .get(\cf3 \\flujo5_vientos\cf0 ).push;\
\
~init = \{\
\
	~data = \cf2 FileReader\cf0 .read(\cf4 "/Users/Shared/db_polje_1_25_ageASC_Age_Cipher_gen03"\cf0 .standardizePath, \cf2 true\cf0 , \cf2 true\cf0 , delimiter: $|); \cf5 // 134 nombres\cf0 \
	\
	~data.size.do(\{ \cf2 |i|\cf0 \
		\cf2 var\cf0  name, temp, finalname;\
		finalname=[];\
		name = ~data[i][1].split($ );\
		temp=\cf4 ""\cf0 ;\
		(name[0].size-3).do(\{ \cf2 |i|\cf0  temp=temp++name[0][i+3] \});\
		name[0] = temp;\
		block\{ \cf2 |break|\cf0 \
			name.do(\{ \cf2 |me|\cf0  ( me.asFloat > 0 ).if(\
					\{ finalname = finalname.add(me.asFloat) \},\
					\{ break.value() \})\
				\});\
			\};\
		~data[i] = [~data[i][0].asFloat, finalname];\
		\});\
	\
	\cf4 "WIND INITIALIZED - FLUX 5"\cf0 .postln;\
\};\
\
~prepare = \{\
\
 	~prepClock = \cf2 TempoClock\cf0 .new;\
 	~prepTask = \{		\
		\cf2 Task\cf0 (\{	\
			~busses = [\
				\cf2 Bus\cf0 .alloc(\cf3 \\audio\cf0 , numChannels:1), \
				]; \
			\
			\cf5 ////	ADD SNAPSHOTS	//////\cf0 \
\cf5 //			~shot = AtsSnapShot.new("/Users/Shared/zee.ats", 0.5, 5, -25.dbamp);\cf0 \
			0.2.wait;\
			\
			\cf5 ////	CONFIRM BUSSES, DATAS	//////\cf0 \
			~winds = [	\cf2 Wind\cf0 .new(s, ~busses[0].bus, ~data) ];\
			0.3.wait;\
			\
			\cf5 ////	ADD VOICES, CONFIRM BUSSES, SHOTS //////\cf0 \
\cf5 //			~voices = [	Voice.new(s, ~winds[1], 0, ~shot,  16.dbamp, 0.01, 2.5, 3) ];\cf0 \
			\
			~pans = ~busses.collect(\{ \cf2 |bus|\cf0  \cf2 ElementPanner\cf0 .new(bus.bus) \});\
			0.3.wait;\
			\
			~windsScore = [\
				[	\
					[ 3,  \{	~winds[0].updateState( 30, 500, 2500, 15000, 10 ) \}],
\fs34 \
					
\fs22 [ 7,  \{	~pans[0].updateState( 10, \cf3 \\perim\cf0 , [1,0.8,1] ) \}], \cf5 // half perimeter SOUTH\cf0 \
					[ 20, \{	~pans[0].updateBehavior( 10, \cf3 \\jittery3\cf0 , (\cf3 \\speed\cf0 : 1, \cf3 \\freq\cf0 :0.05, \cf3 \\amount\cf0 : 0.35, \cf3 \\spread\cf0 : 0.8) ) \}], \cf5 // rand amp nuances on SOUTH perimeter\cf0 \
					[ 75,  \{	~winds[0].updateState( 10, 500, 2500, 15000, 10 ) \}],\
					[ 180, \{	~pans[0].updateState( 45, \cf3 \\perim\cf0 , [1,0.2,1] ) \}], \cf5 // half perimeter NORTH\cf0 \
					[ 180,	\{	~winds[0].updateState( 30, 1000, 500, 10000, 15 ) \}],\
					[ 225, \{   ~pans[0].updateBehavior( 10, \cf3 \\jittery3\cf0 , (\cf3 \\speed\cf0 : 4, \cf3 \\freq\cf0 :0.05, \cf3 \\amount\cf0 : 0.35, \cf3 \\spread\cf0 : 0.2) ) \}], \cf5 // rand amp nuances on NORTH perimeter\cf0 \
					[ 300,	\{	~winds[0].updateState( 25, 5000, 80, 750, 20 ) \}],\
					[ 305,	\{	~winds[0].amp_(-9.dbamp) \}],\
					[ 310, \{	~pans[0].updateState( 30, \cf3 \\rect\cf0 , \{ [ 1, 0.5, \cf2 SinOsc\cf0 .kr(\cf2 LFNoise2\cf0 .kr(1,2,5,0.1),0,0.5,0.5), 0 ] \} ) \}], \cf5 // granulated rand fast\cf0 \
					[ 540,	\{	~winds[0].updateState( 60, 500, 1280, 5750, 1 ) \}],\
					[ 643,	\{	~\cf2 this\cf0 .prepareNext() \} ],\
					[ 650, \{	~winds[0].updateState( 60, 5000, 80, 550, 15 ) \}],\
			\cf5 //		[ 650, \{	~winds[0].updateState( 15, 50, 1280, 5750, 5 ) \}],\
					\cf0 [ 745, \{	~\cf2 this\cf0 .playNext() \} ],\
					[ 750, \{	~winds[0].free	\}]\
				]\
\
			\cf5 //////////	ADD ~THIS.PREPARENEXT AND ~THIS.CLEANUP //////////\cf0 \
			];\
			\
			~finishedFlag = \cf2 false\cf0 ;\
			\
			\cf5 ////	MAKE SURE NUMBER OF COLLECTED SCORES CORRESPONDS TO THE NUMBER OF WINDS //////\cf0 \
			~windTasks = 1.collect(\{ \cf2 | windIndex |\cf0 \
				\cf2 var\cf0  thisClock;\
				thisClock = \cf2 TempoClock\cf0 .new;\
					\cf2 Task\cf0 (\{ \cf2 |starttime|\cf0 \
						\cf2 var\cf0  update, srcdex, now, offset, finished;\
						update = 2; \cf5 // update time for the task to check the score\cf0 \
						srcdex = 0;\
						now = 0.0;\
						offset = 0.0;\
						finished = \cf2 false\cf0 ;\
						\cf4 "checking wind "\cf0 .post; windIndex.post; \cf4 "'s "\cf0 .post; ~windsScore[ windIndex ].size.post; \
							\cf4 " breakpoints for offest"\cf0 .postln;\
						~windsScore[ windIndex ].size.do(\{ \cf2 | i |\cf0 \
							(offset > ~windsScore[windIndex][i][0]).if(\{ srcdex = srcdex + 1 \});\
						\});\
						\cf4 "wind "\cf0 .post; windIndex.post; \cf4 " is starting at breakpoint "\cf0 .post; srcdex.postln;\
\
						~winds[ windIndex ].play;\
						1.5.wait;\
						\
						block(\{ \cf2 | break |\cf0 \
							\cf2 inf\cf0 .do(\{ \
								\cf2 var\cf0  state;\
								now = \cf2 thisThread\cf0 .beats - starttime + offset;\
								\
								finished.not.if(\{\
									(now > ~windsScore[ windIndex ][srcdex][0]).if(\{\
											state = ~windsScore[ windIndex ][srcdex][1];\
											s.makeBundle(\cf2 nil\cf0 , state);\
											srcdex = srcdex + 1;\
											\cf4 "score "\cf0 .post; windIndex.post; \cf4 " advancing to "\cf0 .post; srcdex.postln;\
											(srcdex == ~windsScore[ windIndex ].size).if(\{\
												finished = \cf2 true\cf0 ;\
												~finishedFlag = \cf2 true\cf0 ;\
												\cf4 "this wind's score is FINISHED: "\cf0 .post; windIndex.postln;\
												break.value();\
											\});\
										\});\
									\});\
								update.wait;\
							\});\
						\});	\
					\}, thisClock);\
			\}); \
			2.wait;\
			\cf4 "prepare complete for FLUX 5 - WINDS"\cf0 .postln;\
		\}, ~prepClock);\
	\};\
	~prepTask.value.play;\
\
\};\
\
~play = \{\
\
	~pans.do( \cf2 _\cf0 .play );	\
	~windTasks.do( \cf2 _\cf0 .play );\
\
	\cf4 "WIND PLAYING - FLUX 5"\cf0 .postln;\
	\
\};\
\
~free = \{\
\
	~busses.do(\cf2 _\cf0 .free);\
	~pans.do(\cf2 _\cf0 .free);\
	~prepClock.clear;\
	~windTasks.do(\{ \cf2 | task |\cf0  task.stop.reset; task.clock.clear\});\
	~finishedFlag.not.if(\{\
		\cf4 "finished early"\cf0 .postln;		\
		~winds.do(\{ \cf2 |wind|\cf0  wind.killNow \});\
		~voices.do(\{ \cf2 |voice|\cf0  voice.killNow \});\
	\});\
	~busses = ~winds = ~voices = ~pans = ~shot = ~prepTask = ~prepClock = ~windTasks = ~windsScore = ~finishedFlag = \cf2 nil\cf0 ;\
\
	\cf4 "WIND FREEING - FLUX 5"\cf0 .postln;\
\};\
\
\cf2 MiroEnvironment\cf0 .get(\cf3 \\flujo5_vientos\cf0 ).pop;\
\cf5 //MiroEnvironment.gui}