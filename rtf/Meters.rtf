{\rtf1\ansi\ansicpg1252\cocoartf1138
{\fonttbl\f0\fnil\fcharset0 BitstreamVeraSans-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue179;\red102\green0\blue102;
\red179\green0\blue179;\red128\green0\blue0;\red0\green102\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf2 \
(\
\cf3 var\cf2  a, n, window, view, meterArray, inputText, refreshButton, peakText, ampText, busNumText;\
\cf3 var\cf2  inputsArray, monitorSynth, monitorSynthFunc, xPos,\
	logClip, clipValues, logClipScheds, inputs;\
\
window = \cf3 SCWindow\cf2 (\cf4 "Metering and WTF window"\cf2 , \cf3 Rect\cf2 (\cf5 0\cf2 , \cf5 400\cf2 , \cf5 500\cf2 , \cf5 270 \cf2 ));\
\
inputText = \cf3 SCTextView\cf2 .new(window,\cf3 Rect\cf2 (\cf5 10\cf2 , \cf5 210\cf2 , \cf5 340\cf2 , \cf5 50\cf2 ))\
	.resize_(\cf5 8\cf2 )\
	.enterInterpretsSelection_(\cf3 false\cf2 )\
	.string_(\cf4 "v.speakers.collect( _.busNum )"\cf2  )\
	.keyUpAction_(\{\
		\cf3 | a,b,c,key |\cf2 \
		if( key==\cf5 3\cf2 , \{\
			refreshButton.action.value( refreshButton );\
		\})\
	\});\
\pard\pardeftab560
\cf2 \
inputsArray = (\cf5 1\cf2 ..\cf5 20\cf2 );\
meterArray = \cf3 List\cf2 .new;\
\
monitorSynthFunc = \{\
	\cf3 SynthDef\cf2 ( \cf6 \\meters\cf2 , \{ \
		\cf3 | reset |\cf2 \
		\cf3 var\cf2  sigs, amp, peak, pulse;\
		\cf3 SeedMaster\cf2 .ugen;\
		sigs = \cf3 InFeedback\cf2 .ar( inputsArray );\
		pulse =  \cf3 Impulse\cf2 .kr(\cf5 10\cf2 );\
		\cf3 SendReply\cf2 .kr(pulse, \cf6 '/levels'\cf2 , sigs.collect(\{\
			\cf3 | sig |\cf2 \
			\cf3 var\cf2  peak;\
			peak = \cf3 A2K\cf2 .kr( \cf3 Peak\cf2 .ar(sig, pulse) ).lag(\cf5 0\cf2 ,\cf5 3\cf2 );\
			[ \cf3 RunningMax\cf2 .kr( \cf3 Amplitude\cf2 .kr(sig, \cf5 0.0001\cf2 ), pulse ), peak ];\
		\}).flatten );	\
		\cf3 DC\cf2 .ar(\cf5 0\cf2 );\
	\}).send(s);\
\};\
monitorSynthFunc.value();\
\
o = \cf3 OSCresponder\cf2 (s.addr, \cf6 '/levels'\cf2 , \{\cf3 arg\cf2  time, resp, msg;\
	\{\
		inputsArray.do(\{\
			\cf3 | input, i |\cf2 \
			meterArray[i].value = msg[i*\cf5 2\cf2 +\cf5 3\cf2 ].ampdb.linlin(\cf5 -40\cf2 , \cf5 0\cf2 , \cf5 0\cf2 , \cf5 1\cf2 );\
			meterArray[i].peakLevel = msg[i*\cf5 2\cf2 +\cf5 4\cf2 ].ampdb.linlin(\cf5 -40\cf2 , \cf5 0\cf2 , \cf5 0\cf2 , \cf5 1\cf2 );	\
			ampText[i].string = msg[i*\cf5 2\cf2 +\cf5 3\cf2 ].ampdb.round(\cf5 0.01\cf2 );\
			if( msg[i*\cf5 2\cf2 +\cf5 4\cf2 ]>\cf5 1\cf2 , \{\
				logClip.value( i, input, msg[i*\cf5 2\cf2 +\cf5 4\cf2 ] );\
				peakText[i].background_(\cf3 Color\cf2 .red);\
			\},\{\
				peakText[i].background_(\cf3 Color\cf2 .clear)\
			\});\
			peakText[i].string = msg[i*\cf5 2\cf2 +\cf5 4\cf2 ].ampdb.round(\cf5 0.01\cf2 );\
		\});\
	\}.defer;\
\}).add;\
window.onClose = \{ o.remove; monitorSynth.free; \};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 refreshButton = \cf3 RoundButton\cf2 .new(window,\cf3 Rect\cf2 (\cf5 370\cf2 , \cf5 240\cf2 , \cf5 110\cf2 , \cf5 20\cf2 ))\
	.radius_(\cf5 2\cf2 ).border_(\cf5 1.2\cf2 ).extrude_(\cf3 false\cf2 )\
	.states_([ \
		[ \cf4 "Refresh"\cf2 , \cf3 Color\cf2 .black, \cf3 Color\cf2 (\cf5 0.6\cf2 , \cf5 1.0\cf2 , \cf5 0.6\cf2 , \cf5 1.0\cf2 ) ] ])\
	.resize_(\cf5 9\cf2 )\
	.action_(\{\
		\cf3 |v|\cf2 \
		\cf3 var\cf2  input, newMeters, newPeakText, newAmpText, newBusNumText, r;\
		inputsArray = \cf3 List\cf2 .new;\
\cf7 //		try \{\cf2 \
			input = inputText.string.interpret;\
			input.isKindOf( \cf3 Collection\cf2  ).if(\{\
				inputsArray = input.collect(\{\
					\cf3 | in |\cf2 \
					case\
						\{ in.isKindOf( \cf3 SimpleNumber\cf2  ) \} \{ in \}\
						\{ in.isKindOf( \cf3 Bus\cf2  ) \} \{ in.index \}\
						\{ in.isKindOf( \cf3 CtkAudio\cf2  ) \} \{ in.bus \}\
				\});\
			\},\{\
				inputsArray = case\
					\{ input.isKindOf( \cf3 SimpleNumber\cf2  ) \} \{ input \}\
					\{ input.isKindOf( \cf3 Bus\cf2  ) \} \{ input.index \}\
					\{ input.isKindOf( \cf3 CtkAudio\cf2  ) \} \{ input.bus \}\
			\});\
			monitorSynth.free;\
			monitorSynthFunc.value();\
			\{\
				monitorSynth = \cf3 Synth\cf2 .basicNew( \cf6 \\meters\cf2 , s, if( s.isKindOf( \cf3 BroadcastServer\cf2  ), \{\cf5 100\cf2 \}, \{\cf5 101\cf2 \} ) );\
				s.addr.sendBundle( \cf3 nil\cf2 , monitorSynth.newMsg );\
			\}.defer(\cf5 0.5\cf2 );\
	\
			meterArray.do( \cf3 _\cf2 .remove );\
			peakText.do( \cf3 _\cf2 .remove );\
			ampText.do( \cf3 _\cf2 .remove );\
			busNumText.do( \cf3 _\cf2 .remove );\
			newMeters = \cf3 List\cf2 .new;\
			newAmpText = \cf3 List\cf2 .new;\
			newPeakText = \cf3 List\cf2 .new;\
			newBusNumText = \cf3 List\cf2 .new;\
			\
			clipValues = \cf3 Array\cf2 .newClear( inputsArray.size ).fill(\cf5 0\cf2 );\
			logClipScheds = \cf3 Array\cf2 .newClear( inputsArray.size );\
			\
			xPos = \cf5 10\cf2 ;\
\pard\pardeftab560
\cf2 			inputsArray.do(\{\
				\cf3 | in |\cf2 \
				a = \cf3 SCLevelIndicator\cf2 (window, \cf3 Rect\cf2 (xPos, \cf5 20\cf2 , \cf5 20\cf2 , \cf5 160\cf2 ));\
				a.resize=\cf5 4\cf2 ;\
				a.warning = \cf5 -2\cf2 ;\
				a.style = \cf5 4\cf2 ;\
				a.background = \cf3 Color\cf2 .grey(\cf5 0.2\cf2 );\
				a.drawsPeak = \cf3 true\cf2 ;\
				a.numSteps = \cf5 32\cf2 ;\
				a.image = \{\
					j = \cf3 SCImage\cf2 .new(\cf5 16\cf2 ,\cf5 2\cf2 );\
					j.draw(\{ \cf3 arg\cf2  image;\
						\cf3 var\cf2  lozenge;\
						lozenge = \cf3 Rect\cf2 (\cf5 0\cf2 , \cf5 0\cf2 , \cf5 16\cf2 , \cf5 2\cf2 );\
						\cf3 Pen\cf2 .addRect(lozenge);\
						\cf3 Pen\cf2 .fillColor_(\cf3 Color\cf2 .green(\cf5 0.8\cf2 ));\
						\cf3 Pen\cf2 .fill();\
					\});\
					j\
				\}.value;\
				newMeters.add( a );\
				newPeakText.add( \cf3 SCStaticText\cf2 .new( window, \cf3 Rect\cf2 (xPos,\cf5 4\cf2 ,\cf5 20\cf2 ,\cf5 16\cf2 ) )\
					.string_(\cf4 "0.76"\cf2 )\
					.font_( \cf3 Font\cf2 (\cf4 "Verdana"\cf2 , \cf5 8\cf2 ));\
				);\
				newAmpText.add( \cf3 SCStaticText\cf2 .new( window, \cf3 Rect\cf2 (xPos,\cf5 180\cf2 ,\cf5 20\cf2 ,\cf5 16\cf2 ) )\
					.string_(\cf4 "0.76"\cf2 )\
					.font_( \cf3 Font\cf2 (\cf4 "Verdana"\cf2 , \cf5 8\cf2 ));\
				);\
				newBusNumText.add( \cf3 SCStaticText\cf2 .new( window, \cf3 Rect\cf2 (xPos,\cf5 190\cf2 ,\cf5 20\cf2 ,\cf5 16\cf2 ) )\
					.string_(in)\
					.align_(\cf6 \\center\cf2 )\
					.font_( \cf3 Font\cf2 (\cf4 "Verdana-Bold"\cf2 , \cf5 8\cf2 ));\
				);\
				xPos = xPos + \cf5 25\cf2 ;\
			\});\
			newPeakText.do( \cf3 _\cf2 .resize_(\cf5 1\cf2 ) );\
			newAmpText.do( \cf3 _\cf2 .resize_(\cf5 7\cf2 ) );\
			newBusNumText.do( \cf3 _\cf2 .resize_(\cf5 7\cf2 ) );\
			meterArray = newMeters;\
			ampText = newAmpText;\
			peakText = newPeakText;\
			busNumText = newBusNumText;\
			r = \cf3 Rect\cf2 (\cf5 0\cf2 ,\cf5 0\cf2 ,\cf5 0\cf2 ,\cf5 0\cf2 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 			(meterArray ++ busNumText).do(\{\
				\cf3 | child |\cf2 \
				r = r.union( child.bounds );\
			\});\
			window.bounds_( r.resizeBy(\cf5 5\cf2 ,\cf5 65\cf2 ).origin_( window.bounds.origin ) );\
\cf7 //		\}\cf2 \
	\});\
\
logClip = \{\
	\cf3 arg\cf2  meter, bus, value;\
	( logClipScheds[ meter ].isNil or: \{ logClipScheds[ meter ].isPlaying.not \} ).if(\{\
		logClipScheds[ meter ] = \{ \
			\cf5 5\cf2 .wait; 				\
			format( \cf4 "channel % clipped! ( bus:%, value:% dB )"\cf2 , meter, bus, value.ampdb.round(\cf5 0.001\cf2 ) ).log(\cf6 \\levels\cf2 );\
			clipValues[ meter ] = \cf5 0\cf2 ;\
		\}.fork( \cf3 AppClock\cf2  );\
	\});\
	clipValues[ meter ] = clipValues[ meter ].max( value );\
\};\
\
window.front;\
refreshButton.action.value();\
)\
}