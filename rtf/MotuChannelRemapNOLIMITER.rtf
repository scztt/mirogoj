{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf430
{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs18 \cf2 // REMAPPING HARDWARE OUTS FOR CONTINUOUS 20 CHANNELS\cf0 \
\
\cf2 /*\
(\
~virtChannels = VirtualSpeakerArray.get.getBusNums;\
SynthDef( \\motuRemapNorth, \{ arg out=0, in, gate=1;\
	var env, src;\
	SeedMaster.ugen;\
	10.do(\{\
		|i|\
		Out.ar( i, In.ar( ~virtChannels[i] ) );\
	\});\
	10.do(\{\
		|i|\
		Out.ar( i+22, In.ar( ~virtChannels[i+10] ) ) \
	\})\
\}).send(~northServer);\
\
SynthDef( \\motuRemapSouth, \{ arg out=0, in, gate=1;\
	var env, src;\
	SeedMaster.ugen;\
	10.do(\{\
		|i|\
		Out.ar( i, In.ar( ~virtChannels[i+20] ) );\
	\});\
	10.do(\{\
		|i|\
		Out.ar( i+22, In.ar( ~virtChannels[i+30] ) ) \
	\})\
\}).send(~southServer).store;\
\
~remapNode = s.nextNodeID;\
~northServer.sendBundle( nil, Synth.basicNew( \\motuRemapNorth, ~northServer, ~remapNode ).newMsg( GroupManager.get.listener.node) );\
~southServer.sendBundle( nil, Synth.basicNew( \\motuRemapSouth, ~southServer, ~remapNode ).newMsg( GroupManager.get.listener.node) );\
)\
*/\cf0 \
\cf2 // To kill\cf0 \
\cf2 // ~northServer.sendMsg( \\n_free, ~remapNode )\cf0 \
\cf2 // ~southServer.sendMsg( \\n_free, ~remapNode )\cf0 \
\
(\
\cf3 VirtualSpeakerArray\cf0 .get.listenerSynth.free;\
\cf2 //VirtualSpeakerArray.get.speakers.do( _.free );\cf0 \
~virtChannels = \cf3 VirtualSpeakerArray\cf0 .get.getBusNums;\
~ampBus = \cf3 Bus\cf0 .control( s, 40 ).setAll(1);\
\cf3 SynthDef\cf0 ( \cf4 \\motuRemapNorth\cf0 , \{ \
	\cf3 arg\cf0  out=0, in, masterAmp=1;\
	\cf3 var\cf0  env, src, amp;\
	amp = (\cf3 In\cf0 .kr( ~ampBus.index, 20 )*masterAmp).max(0).min(20);\
	amp = \cf3 Lag3\cf0 .kr( amp, 0.2 );\
	\cf3 SeedMaster\cf0 .ugen;\
	10.do(\{\
		\cf3 |i|\cf0 \
		\cf3 Out\cf0 .ar( i, 
\f1\fs26  
\f0\fs18 \cf3 In\cf0 .ar( ~virtChannels[i] )*amp[i]);\
	\});\
	10.do(\{\
		\cf3 |i|\cf0 \
		\cf3 Out\cf0 .ar( i+22, \cf3 In\cf0 .ar( ~virtChannels[i+10] )*amp[i+10] ) \
	\})\
\}).send(~northServer);\
\
\cf3 SynthDef\cf0 ( \cf4 \\motuRemapSouth\cf0 , \{ \
	\cf3 arg\cf0  out=0, in, masterAmp=1;\
	\cf3 var\cf0  env, src, amp;\
	amp = (\cf3 In\cf0 .kr( ~ampBus.index+20, 20 )*masterAmp).max(0).min(20);\
	amp = \cf3 Lag3\cf0 .kr( amp, 0.2 );\
	\cf3 SeedMaster\cf0 .ugen;\
	10.do(\{\
		\cf3 |i|\cf0 \
		\cf3 Out\cf0 .ar( i, \cf3 In\cf0 .ar( ~virtChannels[i+20] )*amp[i]);\
	\});\
	10.do(\{\
		\cf3 |i|\cf0 \
		\cf3 Out\cf0 .ar( i+22, \cf3 In\cf0 .ar( ~virtChannels[i+30] )*amp[i+10] ) \
	\})\
\}).send(~southServer).store;\
\
~remapNode = s.nextNodeID;\
~northServer.sendBundle( \cf3 nil\cf0 , (~rerouteSynth = \cf3 Synth\cf0 .basicNew( \cf4 \\motuRemapNorth\cf0 , ~northServer, ~remapNode )).newMsg( \cf3 GroupManager\cf0 .get.listener.node) );\
~southServer.sendBundle( \cf3 nil\cf0 , \cf3 Synth\cf0 .basicNew( \cf4 \\motuRemapSouth\cf0 , ~southServer, ~remapNode ).newMsg( \cf3 GroupManager\cf0 .get.listener.node) );\
~mixer = \cf3 MMixer\cf0 .new( ~rerouteSynth, ~ampBus );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural

\f1\fs26 \cf0 v.speakers.do( _.free );
\f0\fs18 \
\pard\pardeftab560\ql\qnatural
\cf0 )}